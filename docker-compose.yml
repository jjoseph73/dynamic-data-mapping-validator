# =============================================================================
# FILE: docker-compose.yml
# =============================================================================
version: '3.8'

services:
  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ddmv-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENV=production
      - DATABASE_URL=postgresql://ddmv_user:${DB_PASSWORD}@postgres:5432/ddmv_db
      - ORACLE_URL=oracle://${ORACLE_USER}:${ORACLE_PASSWORD}@oracle:1521/xe
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - MODEL_PATH=/app/models
      - LOG_LEVEL=INFO
      - WORKERS=4
      - MAX_CONNECTIONS=100
      - RATE_LIMIT_PER_MINUTE=60
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      oracle:
        condition: service_healthy
    networks:
      - ddmv-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ddmv-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=ddmv_db
      - POSTGRES_USER=ddmv_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - ddmv-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ddmv_user -d ddmv_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Oracle Database (for testing)
  oracle:
    image: container-registry.oracle.com/database/express:21.3.0-xe
    container_name: ddmv-oracle
    restart: unless-stopped
    environment:
      - ORACLE_PWD=${ORACLE_PASSWORD}
      - ORACLE_CHARACTERSET=AL32UTF8
    volumes:
      - oracle_data:/opt/oracle/oradata
      - ./init-scripts/oracle:/docker-entrypoint-initdb.d
    ports:
      - "1521:1521"
      - "5500:5500"
    networks:
      - ddmv-network
    healthcheck:
      test: ["CMD", "sqlplus", "-S", "system/${ORACLE_PASSWORD}@localhost:1521/xe", "<<<", "SELECT 1 FROM dual;"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ddmv-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ddmv-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ddmv-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - ddmv-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ddmv-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - ddmv-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ddmv-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ddmv-network

  # Log Management
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: ddmv-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - ddmv-network

  logstash:
    image: logstash:8.8.0
    container_name: ddmv-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/usr/share/logstash/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - ddmv-network

  kibana:
    image: kibana:8.8.0
    container_name: ddmv-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - ddmv-network

volumes:
  postgres_data:
  oracle_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  ddmv-network:
    driver: bridge